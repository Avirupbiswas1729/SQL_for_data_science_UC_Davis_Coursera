Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000 
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table = 10000
vii. hours table = 10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10000 distinct records for primary key 'id'
ii. Hours = 1562 distinct records for foreign key 'business_id'
iii. Category = 2643 distinct records for foreign key 'business_id'
iv. Attribute = 1115 distinct records for foreign key 'business_id'
v. Review = 10000 distinct records for primary key 'id', 9581 for foreign key 'user_id', 8090 for foreign key 'business_id'
vi. Checkin = 493 distinct records for foreign key 'buisness_id'
vii. Photo = 10000 distinct records for primary key 'id', 6493 for foreign key 'buisness_id'
viii. Tip = 537 distinct records for foreign key 'user_id', 3979 for foreign key 'buisness_id'
ix. User = 10000 distinct records for primary key 'id'
x. Friend = 11 distinct records for foreign key 'user_id'
xi. Elite_years = 2780 distinct records for foreign key 'user id'

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: NO
	
	
	SQL code used to arrive at answer:
	
	SELECT *	--Selecting all the columns

	FROM user	--Specifying the table name 'user'

	WHERE							--Checking for the columns which have null values
		id IS NULL OR
		name IS NULL OR
		review_count IS NULL OR
		yelping_since IS NULL OR
		useful IS NULL OR
		funny IS NULL OR
		cool IS NULL OR
		fans IS NULL OR
		average_stars IS NULL OR
		compliment_hot IS NULL OR
		compliment_more IS NULL OR
		compliment_profile IS NULL OR
		compliment_cute IS NULL OR
		compliment_list IS NULL OR
		compliment_note IS NULL OR
		compliment_plain IS NULL OR
		compliment_cool IS NULL OR
		compliment_funny IS NULL OR
		compliment_writer IS NULL OR
		compliment_photos IS NULL

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min:	1	max:	5	avg:	3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min:	1.0 	max:	5.0 	avg:	3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min:	0	max:	2	avg:	0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min:	1	max:	53	 avg:	1.9414
		
	
	v. Table: User, Column: Review_count
	
		min:	0	max:	2000	avg:	24.2995
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
	
	SELECT 
		city,									--Selecting the city column
		SUM(review_count) as City_review_count	--Adding a new column which represents the sum of the review_count
	FROM business								--Specifying table name 'business'
	GROUP BY city								--Grouping by city column
	ORDER BY City_review_count desc				--Ordering the table on the basis of City_review_count in descending order
	
	Copy and Paste the Result Below:
	
	+-----------------+-------------------+
	| city            | City_review_count |
	+-----------------+-------------------+
	| Las Vegas       |             82854 |
	| Phoenix         |             34503 |
	| Toronto         |             24113 |
	| Scottsdale      |             20614 |
	| Charlotte       |             12523 |
	| Henderson       |             10871 |
	| Tempe           |             10504 |
	| Pittsburgh      |              9798 |
	| Montréal        |              9448 |
	| Chandler        |              8112 |
	| Mesa            |              6875 |
	| Gilbert         |              6380 |
	| Cleveland       |              5593 |
	| Madison         |              5265 |
	| Glendale        |              4406 |
	| Mississauga     |              3814 |
	| Edinburgh       |              2792 |
	| Peoria          |              2624 |
	| North Las Vegas |              2438 |
	| Markham         |              2352 |
	| Champaign       |              2029 |
	| Stuttgart       |              1849 |
	| Surprise        |              1520 |
	| Lakewood        |              1465 |
	| Goodyear        |              1155 |
	+-----------------+-------------------+
	(Output limit exceeded, 25 of 362 total rows shown)

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

SELECT
    stars as Star_rating,       --Selecting stars column
    COUNT(stars) as Count       --Adding 'Count' column which represents the count of stars
FROM business                   --Specifying table name 'business'
WHERE city = 'Avon'             --Specifying the city 'Avon'
GROUP BY stars                  --Grouping by stars column

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):

+-------------+-------+
| Star_rating | Count |
+-------------+-------+
|         1.5 |     1 |
|         2.5 |     2 |
|         3.5 |     3 |
|         4.0 |     2 |
|         4.5 |     1 |
|         5.0 |     1 |
+-------------+-------+

ii. Beachwood

SQL code used to arrive at answer:

SELECT
    stars as Star_rating,       --Selecting stars column
    COUNT(stars) as Count       --Adding 'Count' column which represents the count of stars
FROM business                   --Specifying table name 'business'
WHERE city = 'Beachwood'             --Specifying the city 'Beachwood'
GROUP BY stars                  --Grouping by stars column

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):

+-------------+-------+
| Star_rating | Count |
+-------------+-------+
|         2.0 |     1 |
|         2.5 |     1 |
|         3.0 |     2 |
|         3.5 |     2 |
|         4.0 |     1 |
|         4.5 |     2 |
|         5.0 |     5 |
+-------------+-------+		


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
	
	SELECT
		id,                         --Selecting 'id' column
		name,                       --Selecting 'name' column
		review_count                --Selecting 'review_count' column
	FROM user                       --Specifying the table name 'user'
	GROUP BY id                     --Grouping by 'id' column
	ORDER BY review_count desc      --Ordering by 'review_count' column in descending order
	LIMIT 3                         --Limiting to top 3 users
		
	Copy and Paste the Result Below:
	
	+------------------------+--------+--------------+
	| id                     | name   | review_count |
	+------------------------+--------+--------------+
	| -G7Zkl1wIWBBmD0KRy_sCw | Gerald |         2000 |
	| -3s52C4zL_DHRK0ULG6qtg | Sara   |         1629 |
	| -8lbUNlXVSoXqaRRiHiSNg | Yuri   |         1339 |
	+------------------------+--------+--------------+


8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:

	-- As demonstrated by the provided snippet from the review_count and fans table, it becomes apparent that a high review_count does not necessarily translate
	to a higher number of fans. In my perspective, this phenomenon is more closely linked to the quality of reviews submitted by users, the duration of their
	engagement on Yelp, and the utility of their contributions to the community, rather than a direct numerical correlation.
	Unfortunately, my ability to delve deeper into this insight is constrained due to the absence of associated reviews for the prominent names listed. 
	Consequently, I am unable to extend my analysis to examine whether being a longstanding Yelp user correlates significantly with an increased fan count.

	-- I utilized the following codes to extract information regarding reviews and the date of joining Yelp for the most prominent users, aiming to uncover 
	potential patterns or trends that might shed light on this observation.
	
	Code 1:
	
	SELECT
		name,						--Selecting the name column
		review_count,				--Selecting the count of review column
		fans,						--Selecting the fans column
		yelping_since,				--Selecting the column which include the starting date of yelping	
		text						--Selecting the text column
	FROM user 						--Specifying the table name user	
	LEFT JOIN review ON user.id=review.user_id		 --Here we proceed to left join the user table with review table on the basis of user_id column
	ORDER BY review_count DESC			--Ordering in decreasing order on the basis of review_count column
	LIMIT 10							--Limiting to only top 10 users;

	Result:
	+-----------+--------------+------+---------------------+------+
	| name      | review_count | fans | yelping_since       | text |
	+-----------+--------------+------+---------------------+------+
	| Amy       |          609 |  503 | 2007-07-19 00:00:00 | None |
	| Mimi      |          968 |  497 | 2011-03-30 00:00:00 | None |
	| Harald    |         1153 |  311 | 2012-11-27 00:00:00 | None |
	| Gerald    |         2000 |  253 | 2012-12-16 00:00:00 | None |
	| Christine |          930 |  173 | 2009-07-08 00:00:00 | None |
	| Lisa      |          813 |  159 | 2009-10-05 00:00:00 | None |
	| Cat       |          377 |  133 | 2009-02-05 00:00:00 | None |
	| William   |         1215 |  126 | 2015-02-19 00:00:00 | None |
	| Fran      |          862 |  124 | 2012-04-05 00:00:00 | None |
	| Lissa     |          834 |  120 | 2007-08-14 00:00:00 | None |
	+-----------+--------------+------+---------------------+------+
	
	Code 2:
	
	SELECT
		name,						--Selecting the name column
		review_count,				--Selecting the count of review column
		fans,						--Selecting the fans column
		yelping_since,				--Selecting the column which include the starting date of yelping	
		text						--Selecting the text column
	FROM user 						--Specifying the table name user	
	LEFT JOIN review ON user.id=review.user_id		 --Here we proceed to left join the user table with review table on the basis of user_id column
	ORDER BY fans DESC			--Ordering in decreasing order on the basis of fans column
	LIMIT 10							--Limiting to only top 10 users
	
	Result:
	+-----------+--------------+------+---------------------+------+
	| name      | review_count | fans | yelping_since       | text |
	+-----------+--------------+------+---------------------+------+
	| Amy       |          609 |  503 | 2007-07-19 00:00:00 | None |
	| Mimi      |          968 |  497 | 2011-03-30 00:00:00 | None |
	| Harald    |         1153 |  311 | 2012-11-27 00:00:00 | None |
	| Gerald    |         2000 |  253 | 2012-12-16 00:00:00 | None |
	| Christine |          930 |  173 | 2009-07-08 00:00:00 | None |
	| Lisa      |          813 |  159 | 2009-10-05 00:00:00 | None |
	| Cat       |          377 |  133 | 2009-02-05 00:00:00 | None |
	| William   |         1215 |  126 | 2015-02-19 00:00:00 | None |
	| Fran      |          862 |  124 | 2012-04-05 00:00:00 | None |
	| Lissa     |          834 |  120 | 2007-08-14 00:00:00 | None |
	+-----------+--------------+------+---------------------+------+
	
	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: Yes, there are more reviews with the word "love" than the reviews with the word "hate".
			There are 1780 reviews which include the word "love" whereas there are 232 reviews which include the word "hate".

	
	SQL code used to arrive at answer:

	SELECT
		COUNT(text)						--Extracting the count of elements of text column
	FROM review							--Specifying the review table
	WHERE LOWER(text) LIKE '%hate%';	--Specifying those texts which include 'hate' word
	

	SELECT
		COUNT(text)						--Extracting the count of elements of text column
	FROM review							--Specifying the review table
	WHERE LOWER(text) LIKE '%love%';	--Specifying those texts which include 'love' word
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
	
	SELECT
		id,					--Selecting the id column
		name,				--Selecting the name column
		fans				--Selecting the fans column
	FROM user				--Specifying the 'user' table
	ORDER BY fans DESC		--Ordering in decreasing order on the basis of fans column
	LIMIT 10				--Limiting to top 10 users
	
	Copy and Paste the Result Below:

	+------------------------+-----------+------+
	| id                     | name      | fans |
	+------------------------+-----------+------+
	| -9I98YbNQnLdAmcYfb324Q | Amy       |  503 |
	| -8EnCioUmDygAbsYZmTeRQ | Mimi      |  497 |
	| --2vR0DIsmQ6WfcSzKWigw | Harald    |  311 |
	| -G7Zkl1wIWBBmD0KRy_sCw | Gerald    |  253 |
	| -0IiMAZI2SsQ7VmyzJjokQ | Christine |  173 |
	| -g3XIcCb2b-BD0QBCcq2Sw | Lisa      |  159 |
	| -9bbDysuiWeo2VShFJJtcw | Cat       |  133 |
	| -FZBTkAZEXoP7CYvRV2ZwQ | William   |  126 |
	| -9da1xk7zgnnfO1uTVYGkA | Fran      |  124 |
	| -lh59ko3dxChBSZ9U7LfUw | Lissa     |  120 |
	+------------------------+-----------+------+
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.

	I selected Toronto as the focal city due to its substantial review count of 24113. Subsequently, I opted for the "Food" category.
	
i. Do the two groups you chose to analyze have a different distribution of hours?

	Within the food category, only one business, namely Loblaws, met the criteria for the 2-3 group, while two businesses, Cabin Fever and Halo Brewery,
	qualified for the 4-5 group. Comparatively, Loblaws operates daily from 8 am to 10 pm. On the other hand, Cabin Fever welcomes customers on Saturdays,
	Sundays, and Mondays from 4 pm to 2 am, and from Tuesday to Friday from 6 pm to 2 am. Halo Brewery follows a distinct schedule, operating from 3 pm 
	to 9 pm on Tuesdays, Wednesdays, Thursdays, and Fridays, and from 11 am to 9 pm on Saturdays and Sundays, with Mondays being designated as	a non-operational day. 
	This results in a marked contrast in the distribution of operating hours among these establishments.

ii. Do the two groups you chose to analyze have a different number of reviews?

	Comparing the reviews of the businesses, Loblaws has just 10 reviews whereas the 4-5-star businesses have 26 and 15 reviews respectively.
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.

	Observing the data, we can ascertain that High Park and Wallace Emerson serve as the respective neighborhoods for Cabin Fever and Halo Brewery, 
	while Roncesvalles stands as Loblaws' neighborhood. Notably, both High Park and Wallace Emerson businesses fall within the 4-5 star category and 
	boast a higher review count than Loblaws. This suggests that High Park and Wallace Emerson are bustling and more densely populated locales in comparison to Roncesvalles.

	Furthermore, the operating hours provided in the dataset reveal a distinct pattern: Cabin Fever and Halo Brewery commence operations later than
	Loblaws and extend their hours into the late night, concluding well past 10 pm. This leads us to infer that the residents of High Park and Wallace Emerson 
	tend to wake up later and remain active until the late hours of the night, distinguishing them from the lifestyle observed in Roncesvalles.

	In light of these observations, we can deduce that High Park and Wallace Emerson exhibit a vibrant and energetic atmosphere, making them favorable 
	locations for food-based businesses. In contrast, Roncesvalles appears to maintain a relatively less bustling ambiance.
	
	SQL code used for analysis:

	SELECT 
		city,								--Selecting the city column 
		SUM(review_count) AS total_review 	--Fetching the total review count 
	FROM business 							--Specifying the business table
	GROUP BY city							--Grouping by city column
	ORDER BY total_review DESC				--Ordering in decreasing order on the  basis of total review
	LIMIT 10;								--Limiting to top 10 cities
	
	SELECT
		CASE												--We are using case to specify category
		WHEN stars>=4 THEN '4-5 Stars'						--We are taking one category as 4-5 Stars 
		WHEN (stars>=2 AND stars<=3) THEN '2-3 Stars'		--Another category is 2-3 stars
		END as rating,										--We are naming this column as rating
		postal_code,										--Selecting postal_code column
		review_count,										--Selecting review_count column
		hours.hours,										--Selecting hours column
		name,												--Selecting name column
		neighborhood										--Selecting neighborhood column
	FROM business INNER JOIN category						--Specifying the table business
		 ON business.id=category.business_id				--Using inner join on the basis of id
		 INNER JOIN hours									--Another use of inner join on the basis of id
		 ON business.id=hours.business_id
	WHERE city='Toronto'									--Specifying the city 'Toronto'
		  AND category = 'Food'								--Specifying the category 'Food'
		  AND (stars>=4 OR (stars <3 and stars>2))			--Specifying the stars are equal or more than 4 and in between 2 and 3
	ORDER BY stars DESC, hours DESC;						--Ordering in descending order on the basis of stars and hours column
	
	Results:
	
	+------------+--------------+
	| city       | total_review |
	+------------+--------------+
	| Las Vegas  |        82854 |
	| Phoenix    |        34503 |
	| Toronto    |        24113 |
	| Scottsdale |        20614 |
	| Charlotte  |        12523 |
	| Henderson  |        10871 |
	| Tempe      |        10504 |
	| Pittsburgh |         9798 |
	| Montréal   |         9448 |
	| Chandler   |         8112 |
	+------------+--------------+
	
	+-----------+-------------+--------------+-----------------------+--------------+-----------------+
	| rating    | postal_code | review_count | hours                 | name         | neighborhood    |
	+-----------+-------------+--------------+-----------------------+--------------+-----------------+
	| 4-5 Stars | M6P 1A6     |           26 | Wednesday|18:00-2:00  | Cabin Fever  | High Park       |
	| 4-5 Stars | M6P 1A6     |           26 | Tuesday|18:00-2:00    | Cabin Fever  | High Park       |
	| 4-5 Stars | M6P 1A6     |           26 | Thursday|18:00-2:00   | Cabin Fever  | High Park       |
	| 4-5 Stars | M6P 1A6     |           26 | Sunday|16:00-2:00     | Cabin Fever  | High Park       |
	| 4-5 Stars | M6P 1A6     |           26 | Saturday|16:00-2:00   | Cabin Fever  | High Park       |
	| 4-5 Stars | M6P 1A6     |           26 | Monday|16:00-2:00     | Cabin Fever  | High Park       |
	| 4-5 Stars | M6P 1A6     |           26 | Friday|18:00-2:00     | Cabin Fever  | High Park       |
	| 4-5 Stars | M6H 1V5     |           15 | Wednesday|15:00-21:00 | Halo Brewery | Wallace Emerson |
	| 4-5 Stars | M6H 1V5     |           15 | Tuesday|15:00-21:00   | Halo Brewery | Wallace Emerson |
	| 4-5 Stars | M6H 1V5     |           15 | Thursday|15:00-21:00  | Halo Brewery | Wallace Emerson |
	| 4-5 Stars | M6H 1V5     |           15 | Sunday|11:00-21:00    | Halo Brewery | Wallace Emerson |
	| 4-5 Stars | M6H 1V5     |           15 | Saturday|11:00-21:00  | Halo Brewery | Wallace Emerson |
	| 4-5 Stars | M6H 1V5     |           15 | Friday|15:00-21:00    | Halo Brewery | Wallace Emerson |
	| 2-3 Stars | M6R 1X3     |           10 | Wednesday|8:00-22:00  | Loblaws      | Roncesvalles    |
	| 2-3 Stars | M6R 1X3     |           10 | Tuesday|8:00-22:00    | Loblaws      | Roncesvalles    |
	| 2-3 Stars | M6R 1X3     |           10 | Thursday|8:00-22:00   | Loblaws      | Roncesvalles    |
	| 2-3 Stars | M6R 1X3     |           10 | Sunday|8:00-22:00     | Loblaws      | Roncesvalles    |
	| 2-3 Stars | M6R 1X3     |           10 | Saturday|8:00-22:00   | Loblaws      | Roncesvalles    |
	| 2-3 Stars | M6R 1X3     |           10 | Monday|8:00-22:00     | Loblaws      | Roncesvalles    |
	| 2-3 Stars | M6R 1X3     |           10 | Friday|8:00-22:00     | Loblaws      | Roncesvalles    |
	+-----------+-------------+--------------+-----------------------+--------------+-----------------+
	
	
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:

	The businesses that are open tend to have more reviews than ones that are closed on average.

		Open:   AVG(review_count) = 31.757
		Closed: AVG(review_count) = 23.198
         
ii. Difference 2:     

	The average star rating is higher for businesses that are open than businesses that are closed.
		
		Open:   AVG(stars) = 3.68
 		Closed: AVG(stars) = 3.52
		
SQL code used for analysis:

	SELECT
		COUNT(DISTINCT(id)) AS Number_of_business,		--Counting the distinct ids
		ROUND(AVG(stars),2) AS Avg_stars,				--Getting the average of stars
		ROUND(AVG(review_count),2) AS Avg_review,		--Getting the average of review_count
		SUM(review_count) AS Total_review_count,		--Getting the total_review_count
		is_open											--Selecting the is_open column
	FROM business										--Specifying the business table
	GROUP BY is_open									--Grouping by is_open column
	
	Results:
	
	+--------------------+-----------+------------+--------------------+---------+
	| Number_of_business | Avg_stars | Avg_review | Total_review_count | is_open |
	+--------------------+-----------+------------+--------------------+---------+
	|               1520 |      3.52 |       23.2 |              35261 |       0 |
	|               8480 |      3.68 |      31.76 |             269300 |       1 |
	+--------------------+-----------+------------+--------------------+---------+
	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
    
	Predicting the number of fans a user will have is an interesting problem to consider according to me.
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
                           
	After studying the ER diagram, there are a few points that came to mind that can be useful for predicting the number of fans a user will have like
	the number of useful reviews, years active on yelp, whether he/she is an elite member and for how long, compliments received from users etc. There could
	have been a lot of other analysis that could have been done based on other factors like the quality of the review made, review sentiment analysis,
	rating of the business for which the review was made etc. but I haven’t considered all these in the current analysis.

	So, I have tried to use the user table and the elite_years table for my analysis. The result of the analysis are as follows:
	1) Being an elite member doesn’t have much of an effect on the number of fans as most of the high fan user weren’t elite members ever.
	2) On an average, a user has been on yelp for 7 years.
	3) Now for fan prediction, it seems on an average each review can count towards 0.033 fans i.e. on an average one can expect 1 fan for every 30 reviews posted
	4) Other observations are, on an average, one can expect 1 fan for every 4 rating for usefulness given by users and on average 1 fan for every 5.5 rating for compliment given by users

iii. Output of your finished dataset:
         
	Result 1 according to Code 1:
	+---------+--------------+------------+-----------------+-----------------+---------------------+
	| name    | years_active | elite_year | fans_per_review | fans_per_useful | fans_per_compliment |
	+---------+--------------+------------+-----------------+-----------------+---------------------+
	| Gerald  |           11 |       None |            0.13 |            0.01 |                0.01 |
	| .Hon    |           17 |       None |            0.08 |            0.01 |                0.01 |
	| eric    |           16 |       None |            0.01 |            16.0 |                0.24 |
	| Roanna  |           17 |       None |             0.1 |            0.03 |                0.02 |
	| Ed      |           14 |          7 |            0.04 |            0.27 |                0.13 |
	| Dominic |           12 |          6 |            0.04 |            0.46 |                0.13 |
	| Lissa   |           16 |          8 |            0.14 |            0.26 |                0.04 |
	| Alison  |           16 |       None |            0.08 |             0.2 |                0.03 |
	| Sui     |           14 |       None |             0.1 |            8.67 |                0.27 |
	| Crissy  |           15 |       None |            0.04 |            6.25 |                0.24 |
	+---------+--------------+------------+-----------------+-----------------+---------------------+
	
	Result 2 according to Code 2:
	+--------------+-----------------+-----------------+---------------------+
	| years_active | fans_per_review | fans_per_useful | fans_per_compliment |
	+--------------+-----------------+-----------------+---------------------+
	|      10.1995 | 0.0329976979281 |  0.240480232298 |      0.179715921136 |
	+--------------+-----------------+-----------------+---------------------+
	
iv. Provide the SQL code you used to create your final dataset:

	Code 1:
	
	SELECT
		name,
		DATE('NOW')-yelping_since AS years_active,
		(MAX(year)-MIN(year)) AS elite_year,
		ROUND(fans*1.0/review_count,2) as fans_per_review,
		ROUND(fans*1.0/useful,2) as fans_per_useful,
		ROUND(fans*1.0/(funny+cool+compliment_hot+ compliment_more+ compliment_profile+ compliment_cute+ compliment_list + compliment_note + compliment_plain + compliment_cool + compliment_funny + compliment_writer + compliment_photos),2) AS fans_per_compliment
	FROM user LEFT JOIN elite_years
	ON user.id=elite_years.user_id
	GROUP BY name
	ORDER BY review_count DESC
	LIMIT 10
	
	Code 2:
	
	SELECT
		AVG(DATE('NOW')-yelping_since) AS years_active,
		AVG(ROUND(fans*1.0/review_count,2)) as fans_per_review,
		AVG(ROUND(fans*1.0/useful,2)) as fans_per_useful,
		AVG(ROUND(fans*1.0/(funny+cool+compliment_hot+ compliment_more+ compliment_profile+ compliment_cute+ compliment_list + compliment_note + compliment_plain + compliment_cool + compliment_funny + compliment_writer + compliment_photos),2)) AS fans_per_compliment
	FROM user;